{"version":3,"sources":["util.js","Map.js","InfoBox.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["casesTypeColors","cases","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","color","fillColor","radius","Math","sqrt","Popup","className","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","InfoBox","title","active","isRed","total","props","Card","onClick","CardContent","Typography","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98e43348.chunk.js","sourcesContent":["import React from \"react\";\r\nimport numeral from \"numeral\"\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors={\r\n    cases: {\r\n        hex:\"#CC1034\",\r\n        multiplier:50,\r\n    },\r\n    recovered: {\r\n        hex:\"#7dd71d\",\r\n        multiplier:50,\r\n    },\r\n    deaths: {\r\n        hex:\"#fb4443\",\r\n        multiplier:700,\r\n    },\r\n\r\n};\r\n\r\nexport const sortData=(data)=>{\r\n    const sortedData=[...data];\r\n\r\n    sortedData.sort((a,b)=>{\r\n        if(a.cases>b.cases)\r\n        {\r\n            return -1;\r\n        }\r\n        else{\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n// DRAW circles on the map with interactive tooltop\r\n\r\nexport const showDataOnMap = (data, casesType=\"cases\")=>(\r\n\r\n    data.map(country=> (\r\n        <Circle\r\n           center={[country.countryInfo.lat,country.countryInfo.long]}\r\n           fillOpacity={0.4}\r\n           color={casesTypeColors[casesType].hex}\r\n           fillColor={casesTypeColors[casesType].hex}\r\n           radius={\r\n               Math.sqrt(country[casesType])*casesTypeColors[casesType].multiplier\r\n           }\r\n        >\r\n        <Popup>\r\n         <div className=\"info-container\">\r\n\r\n         <div \r\n             className=\"info-flag\"\r\n             style={{ backgroundImage: `url(${country.countryInfo.flag})`}}\r\n         />\r\n         <div className=\"info-name\">{country.country}</div>\r\n         <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n         <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n         <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n\r\n         </div>\r\n\r\n            \r\n        </Popup>\r\n\r\n        </Circle>\r\n\r\n    ))\r\n);","import {Map as LeafletMap, TileLayer } from 'react-leaflet';\r\nimport React from 'react';\r\nimport \"./Map.css\";\r\nimport {showDataOnMap} from \"./util\";\r\n\r\nfunction Map({countries,casesType, center,zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n        <LeafletMap center={center} zoom={zoom}>\r\n            <TileLayer \r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n            />\r\n            \r\n            {showDataOnMap(countries,casesType)}\r\n        </LeafletMap>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport \"./InfoBox.css\";\r\nimport {Card,CardContent,Typography} from '@material-ui/core';\r\nfunction InfoBox({title,cases,active,isRed,total, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"} ${isRed && \"infoBox--red\"}` }>\r\n            <CardContent>\r\n              {/* Title i.e. coronavirus cases*/}\r\n              <Typography className=\"infoBox__title\" color=\"textsecondary\">\r\n                  {title}\r\n              </Typography>\r\n\r\n              {/*+120k Number of cases*/}\r\n              <h2 className= {`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n              {/* 1.2m Total*/}\r\n              <Typography className=\"infoBox__total\" color=\"textsecondary\">\r\n                  {total} Total\r\n              </Typography>\r\n\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react'\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n        {countries.map(({country,cases})=>(\r\n            <tr>\r\n                <td>{country}</td>\r\n                <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n            </tr>\r\n        \r\n\r\n        ))}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React,{useState,useEffect} from \"react\";\r\nimport {Line} from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options={\r\n   legend: {\r\n       display:false,\r\n    },\r\n   elements: {\r\n       point: {\r\n           radius: 0,\r\n       },\r\n   },\r\n   maintainAspectRatio: false,\r\n   tooltips: {\r\n       mode:\"index\",\r\n       intersect:false,\r\n       callbacks: {\r\n           label:function(tooltipItem,data){\r\n               return numeral(tooltipItem.value).format(\"+0,0\");\r\n           },\r\n       },\r\n   },\r\n   scales: {\r\n       xAxes:[\r\n           {\r\n               type:\"time\",\r\n               \"time\": {\r\n                   format: \"MM/DD/YY\",\r\n                   tooltipFormat:\"ll\",\r\n               },\r\n           },\r\n       ],\r\n       yAxes: [\r\n           {\r\n               gridLines:{\r\n                   display:false\r\n               },\r\n               ticks:{\r\n                   callback:function(value,index,values){\r\n                       return numeral(value).format(\"0a\");\r\n                   },\r\n               },\r\n           },\r\n       ],\r\n   },\r\n\r\n};\r\n\r\nconst buildChartData=(data,casesType=\"cases\")=>\r\n{\r\n    let chartData=[];\r\n    let lastDataPoint;\r\n    for(let date in data.cases) {\r\n\r\n       if(lastDataPoint) {\r\n           let newDataPoint= {\r\n               x:date,\r\n               y:data[casesType][date]-lastDataPoint,\r\n           };\r\n           chartData.push(newDataPoint);\r\n       }\r\n       lastDataPoint=data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType=\"cases\", ...props}) {\r\n    const[data,setData]=useState({});\r\n\r\n     useEffect(()=> {\r\n\r\n         const fetchData= async()=>{\r\n            await  fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response)=>{return response.json();\r\n            })\r\n            .then((data)=>{\r\n                \r\n                let chartData=buildChartData(data, casesType);\r\n                setData(chartData);\r\n                \r\n            });\r\n\r\n         };\r\n           fetchData();\r\n           \r\n     },[casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n       \r\n        {data?.length > 0 && (\r\n            <Line\r\n              options={options}\r\n            data={{\r\n                datasets:[{\r\n                    backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                    borderColor: \"#CC1034\",\r\n                    data: data\r\n                    },\r\n                    ],\r\n            }}\r\n              \r\n             />\r\n       )}\r\n           \r\n                  </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;\r\n","import { MenuItem,FormControl,Select,Card, CardContent } from '@material-ui/core';\nimport React,{useState,useEffect} from 'react';\nimport './App.css';\nimport Map from \"./Map\";\nimport InfoBox from './InfoBox';\nimport Table from './Table';\nimport {sortData, prettyPrintStat} from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\n\n\n\nfunction App() {\n\n  const [countries,setCountries] = useState([]);\n  const [country,setCountry] = useState(\"worldwide\");\n  const [countryInfo,setCountryInfo]=useState({});\n  const [tableData,setTableData]=useState([]);\n  const [mapCenter,setMapCenter]=useState({lat:34.80746,lng:-40.4796});\n  const [mapZoom,setMapZoom]=useState(3);\n  const [mapCountries,setMapCountries]=useState([]);\n  const [casesType, setCasesType]=useState(\"cases\");\n  useEffect(()=>{\n    fetch(\"http://disease.sh/v3/covid-19/all\")\n    .then(response=>response.json())\n    .then(data=>{\n      setCountryInfo(data);\n    })\n\n  },[])\n\n  useEffect(()=>{\n     // async-> send a request, wait for it, do something with info\n     \n     const getCountriesData= async()=> {\n        await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response)=>response.json())\n        .then((data)=>{\n          const countries=data.map((country)=> (\n            {\n              name: country.country,// united states,united kingdom\n              value:country.countryInfo.iso2 //UK,USA,FR\n\n            }\n\n          ));\n          const sortedData=sortData(data);\n            setTableData(sortedData);\n            setMapCountries(data);\n            setCountries(countries);\n\n\n        });\n     };\n      \n     getCountriesData();\n\n\n  },[]);\n\n  const onCountryChange = async(event)=>\n  {\n    const countryCode=event.target.value;\n    setCountry(countryCode);\n    const url=countryCode==='worldwide'?'http://disease.sh/v3/covid-19/all':`https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n    .then(response=>response.json())\n    .then(data=> {\n      setCountry(countryCode);\n      setCountryInfo(data);\n\n      countryCode === \"worldwide\"\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\n      //setMapCenter([data.countryInfo.lat, data.countryInfo.lng]);\n      setMapZoom(3);\n    \n    });\n  };\n\n  return (\n    <div className=\"app\">\n    <div className=\"app__left\">\n     <div className=\"app__header\">\n      <h1>COVID-19 TRACKER</h1>\n      <FormControl className=\"app__dropdown\">\n      <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n      <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n     {\n       countries.map(country=>(\n         <MenuItem value={country.value}>{country.name}</MenuItem>\n       ))\n     }\n      </Select>\n\n      </FormControl>\n    </div>\n    \n    <div className=\"app__stats\">\n       <InfoBox isRed active={casesType===\"cases\"} onClick={e=>setCasesType(\"cases\")} title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n       <InfoBox active={casesType===\"recovered\"} onClick={e=>setCasesType(\"recovered\")} title=\"Recovered\"  cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n       <InfoBox isRed active={casesType===\"deaths\"} onClick={e=>setCasesType(\"deaths\")} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n\n\n\n    </div>\n\n    <Map \n      casesType={casesType}\n      countries={mapCountries}\n      center={mapCenter}\n      zoom={mapZoom}\n    />\n    </div>\n\n    <Card className=\"app__right\">\n       <CardContent>\n         <h3>Live Cases by Country</h3>\n         <Table countries={tableData} />\n         <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n         <LineGraph className=\"app__graph\" casesType={casesType} />\n       </CardContent>\n\n    </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}